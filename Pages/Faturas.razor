@page "/faturas"
@using RhythmsOfGiving.Controller.UI
@using RhythmsOfGiving.Controller.Utilizadores
@using System.Security.Claims
@inject UiService UiService

<PageTitle>Faturas</PageTitle>

<AuthorizeView Roles="User">
    <Authorized>
        <div class="space-y-3 py-8">
            <h1 class="text-3xl font-medium">
                <i class="bi bi-receipt"></i> Faturas
            </h1>
            <h2 class="text-gray-500">Consulte os recibos de todos os seus leilões ganhos.</h2>
        </div>
        <div class="space-y-4">
            @if (FaturaList.Count != 0)
            {
                @foreach (Fatura f in FaturaList)
                {
                    <div class="bg-white border rounded-2xl p-8 space-y-4 shadow-sm">
                        <div class="border-b pb-8 text-center space-y-2">
                            <img src="images/rog_color.png" class="w-[20rem] m-auto"/>
                        </div>
                        <div class="flex place-content-between items-center border-b pb-4">
                            <h1 class="text-xl font-medium  ">
                                Fatura #@f.GetIdFatura()
                            </h1>
                            <span class="text-gray-400">
                                @f.GetDataHoraEmissao().ToString("dd/MM/yyyy hh:mm")
                            </span>
                        </div>
                        <div class="border-b pb-4 items-center">
                            <p>
                                Nome: @f.GetNomeLicitador()
                            </p>
                            <p>
                                NIF: @f.GetNif()
                            </p>
                        </div>
                        <div class="border-b pb-4">
                            <h1 class="text-xl font-medium  ">
                                Leilão #@f.GetIdLeilao()
                            </h1>
                        </div>
                        <div class="flex place-content-between border-b pb-4 items-center">
                            <span>
                                Licitação: #@f.GetIdLicitacao()
                            </span>
                            <div>
                                <p class="text-sm m-auto w-fit">
                                    Total pago
                                </p>
                                <p class="w-fit m-auto text-lg">
                                    @f.GetValor().ToString("0.00€")
                                </p>
                            </div>
                        </div>
                        <div class="flex place-content-between text-xl items-center">
                            <div class="font-medium">
                                <p>
                                    Total Doado
                                </p>
                                <p class="text-sm text-gray-400 font-normal">
                                    Para Instituição #@f.GetIdInstituicao()
                                </p>
                            </div>
                            <span class="text-rhythms font-medium">
                                @f.GetValor().ToString("0.00€")
                            </span>
                        </div>
                    </div>
                }
            }
            else
            {
                <p>
                    A sua conta ainda não tem faturas associadas.
                </p>
            }
        </div>
    </Authorized>
</AuthorizeView>

@code {
    private int IdLicitador { get; set; }
    
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationState { get; set; }
    
    private SortedSet<Fatura> FaturaList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationState is null)
        {
            return;
        }

        var authState = await AuthenticationState;
        if (!authState.User.Identity.IsAuthenticated)
        {
            return;
        }

        IdLicitador = int.Parse(authState.User.FindFirstValue(ClaimTypes.NameIdentifier));

        try
        {
            FaturaList = UiService.GetFaturasLicitador(IdLicitador);
        }
        catch
        {
            FaturaList = new SortedSet<Fatura>();
        }
    }
}
