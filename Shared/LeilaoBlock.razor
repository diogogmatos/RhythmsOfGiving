@using RhythmsOfGiving.Controller.UI
@using Microsoft.AspNetCore.SignalR.Client
@inject UiService UiService
@implements IAsyncDisposable

<div class="grid grid-cols-3 border h-96 rounded-2xl shadow-sm overflow-hidden bg-white">
    @* Informações *@
    <div class="xl:col-span-2 col-span-3 h-full grid grid-cols-1 gap-4 content-between p-8">
        @* Nome Artista *@
        <div class="flex space-x-2 items-center select-none">
            <img class="object-cover w-8 h-8 rounded-full" src=@GetAuthorImagePath()/>
            <p class="font-[600]">@GetArtista()</p>
        </div>
        @* Titulo Leilao *@
        <p class="font-[600] text-2xl">
            @GetTitle()
        </p>
        @* Detalhes *@
        <div class="flex text-gray-400 select-none">
            <p class="w-fit m-auto ml-0">Género - <text class="font-medium">@GetGenero()</text></p>
            <p class="w-fit m-auto">Tipo - <text class="font-medium">@GetTipo()</text></p>
            <p class="w-fit m-auto mr-0">Fim - <text class="font-medium">@GetFim()</text></p>
        </div>
        @* Descrição *@
        <p class="text-justify">
            @GetDescricao()
        </p>
        @* Botão e Preço *@
        <div class="flex space-x-4 select-none place-content-between">
            <button onclick="location.href='/leiloes/@GetId()';" class="min-w-80 w-full hover:bg-rhythms hover:text-white bg-rhythms/10 text-rhythms py-2 font-medium rounded-xl transition-all">
                Licitar ->
            </button>
            @if (ownLicitacao != 0) {
                @if (ownLicitacao > lastLicitacao)
                {
                    <div class="text-center min-w-fit">
                        <p class="text-sm text-gray-400 font-medium">
                            a sua licitação:
                        </p>
                        <p class="text-xl font-[600] text-rhythms">
                            @ownLicitacao.ToString("0.00€")
                        </p>
                    </div>
                }
                else
                {
                    <div class="text-center min-w-fit">
                        <p class="text-sm text-gray-400 font-medium">
                            a sua licitação:
                        </p>
                        <p class="text-xl font-[600] text-rhythms/50">
                            @ownLicitacao.ToString("0.00€")
                        </p>
                    </div>
                }
            }
            <div class="text-center min-w-fit">
                @if (lastLicitacao != 0 && !IsAsCegas()) {
                    @if (lastLicitacao > ownLicitacao)
                    {
                        <p class="text-sm text-gray-400 font-medium">
                            última licitação:
                        </p>
                        <p class="text-xl font-[600] text-rhythms">
                            @lastLicitacao.ToString("0.00€")
                        </p>
                    }
                    else
                    {
                        <p class="text-sm text-gray-400 font-medium">
                            última licitação:
                        </p>
                        <p class="text-xl font-[600] text-rhythms/50">
                            @lastLicitacao.ToString("0.00€")
                        </p>
                    }
                }
                else {
                    <p class="text-sm text-gray-400 font-medium">
                        valor base:
                    </p>
                    <p class="text-xl font-[600] text-rhythms">
                        @GetValorBase().ToString("0.00€")
                    </p>
                }
            </div>
        </div>
    </div>
    @* Imagem *@
    <div class="min-w-[25rem] h-96 bg-gray-300 hidden xl:block">
        <img class="object-cover h-full w-full" src=@GetImagePath()/>
    </div>
</div>

@code {
    [EditorRequired]
    [Parameter]
    public LeilaoUi Leilao { get; set; }
    
    // licitações

    private float ownLicitacao;
    private float lastLicitacao;

    private HubConnection? infoHubConnection;

    protected override async Task OnInitializedAsync()
    {
        GetOwnLicitacao();
        GetLastLicitacao();
        
        infoHubConnection = new HubConnectionBuilder()
            .WithUrl("http://localhost:5269/infohub")
            .Build();

        infoHubConnection.On("UpdateAuctionInfo", () =>
        {
            GetOwnLicitacao(); // atualizar própria licitação
            GetLastLicitacao(); // atualizar última licitação
            InvokeAsync(StateHasChanged);
        });
        
        await infoHubConnection.StartAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (infoHubConnection is not null)
        {
            await infoHubConnection.DisposeAsync();
        }
    }

    private void GetOwnLicitacao()
    {
        ownLicitacao = UiService.GetUltimaLicitacaoUtilizador("diogo@mail.com", GetId());
    }
    
    private void GetLastLicitacao()
    {
        lastLicitacao = UiService.GetUltimaLicitacaoLeilao("diogo@mail.com", GetId());
    }
    
    // info

    private int GetId() {
        return Leilao.GetId();
    }
    private string GetArtista() {
        return Leilao.GetArtista();
    }
    private string GetTitle() {
        return Leilao.GetTitle();
    }
    private string GetLocalizacao() {
        return Leilao.GetLocalizacao();
    }
    private string GetGenero() {
        return Leilao.GetGenero();
    }
    private string GetTipo() {
        return Leilao.GetTipo();
    }
    private string GetFim() {
        return Leilao.GetFim().ToShortDateString();
    }
    private string GetDescricao() {
        return Leilao.GetShortDescricao();
    }

    private float GetValorBase()
    {
        return Leilao.GetValorBase();
    }

    private string GetImagePath() {
        return Leilao.GetImagePath();
    }

    private string GetAuthorImagePath() {
        return Leilao.GetAuthorImagePath();
    }

    private bool IsAsCegas() {
        return Leilao.IsAsCegas();
    }
}