@using RhythmsOfGiving.Controller.UI
@using Microsoft.AspNetCore.SignalR.Client
@using RhythmsOfGiving.Controller.Leiloes
@implements IAsyncDisposable
@inject UiService UiService

<div class="grid grid-cols-3 border h-[30rem] rounded-2xl shadow-sm overflow-hidden bg-white">
    @* Informações *@
    <div class="xl:col-span-2 col-span-3 h-full grid grid-cols-1 gap-4 content-between p-8">
        <div class="space-y-4">
            @* Nome Artista *@
            <div class="flex space-x-2 items-center select-none">
                <img class="object-cover w-8 h-8 rounded-full" src=@Leilao.GetAuthorImagePath()/>
                <p class="font-[600]">@Leilao.GetArtista()</p>
            </div>
            @* Titulo Leilao *@
            <p class="font-[600] text-2xl">
                @Leilao.GetTitle()
            </p>
            @* Detalhes *@
            <div class="flex text-gray-400 select-none">
                <p class="w-fit m-auto ml-0">Género - <text class="font-medium">@Leilao.GetGenero()</text></p>
                <p class="w-fit m-auto">Tipo - <text class="font-medium">@Leilao.GetTipo()</text></p>
                <p class="w-fit m-auto mr-0">Fim - <text class="font-medium">@Leilao.GetFim().ToString("dd/MM/yyyy hh:mm")</text></p>
            </div>
        </div>
        @* Descrição *@
        <p class="text-justify">
            @Leilao.GetDescricao()
        </p>
        <div class="flex space-x-4 select-none place-content-between items-center">
            <div class="text-center min-w-fit">
                <p class="text-sm text-gray-400 font-medium">
                    tempo restante:
                </p>
                <p class="text-xl font-[600] text-rhythms">
                    @ConvertSecondsToTimeString(counter)
                </p>
            </div>
            @if (ownLicitacao != 0)
            {
                @if (ownLicitacao >= lastLicitacao || (ownLicitacao > Leilao.GetValorBase() && Leilao.IsAsCegas()))
                {
                    <div class="text-center min-w-fit">
                        <p class="text-sm text-gray-400 font-medium">
                            a sua licitação:
                        </p>
                        <p class="text-xl font-[600] text-rhythms">
                            @ownLicitacao.ToString("0.00€")
                        </p>
                        <p class="text-sm text-gray-400 font-medium">
                            @ownLicitacaoDate.ToString("dd/MM/yyyy hh:mm")
                        </p>
                    </div>
                }
                else
                {
                    <div class="text-center min-w-fit">
                        <p class="text-sm text-gray-400 font-medium">
                            a sua licitação:
                        </p>
                        <p class="text-xl font-[600] text-rhythms/50">
                            @ownLicitacao.ToString("0.00€")
                        </p>
                        <p class="text-sm text-gray-400 font-medium">
                            @ownLicitacaoDate.ToString("dd/MM/yyyy hh:mm")
                        </p>
                    </div>
                }
            }
            <div class="text-center min-w-fit">
                @if (lastLicitacao != 0 && !Leilao.IsAsCegas() && ownLicitacao != lastLicitacao)
                {
                    <p class="text-sm text-gray-400 font-medium">
                        última licitação:
                    </p>
                    @if (lastLicitacao > ownLicitacao)
                    {

                        <p class="text-xl font-[600] text-rhythms">
                            @lastLicitacao.ToString("0.00€")
                        </p>
                    }
                    else
                    {
                        <p class="text-xl font-[600] text-rhythms/50">
                            @lastLicitacao.ToString("0.00€")
                        </p>
                    }
                    <p class="text-sm text-gray-400 font-medium">
                        @lastLicitacaoDate.ToString("dd/MM/yyyy hh:mm")
                    </p>
                }
                else
                {
                    <p class="text-sm text-gray-400 font-medium">
                        valor base:
                    </p>
                    @if (Leilao.GetValorBase() > ownLicitacao)
                    {
                        <p class="text-xl font-[600] text-rhythms">
                            @Leilao.GetValorBase().ToString("0.00€")
                        </p>
                    }
                    else
                    {
                        <p class="text-xl font-[600] text-rhythms/50">
                            @Leilao.GetValorBase().ToString("0.00€")
                        </p>
                    }
                }
            </div>
        </div>
    </div>
    @* Imagem *@
    <div class="min-w-[25rem] h-[30rem] bg-gray-300 hidden xl:block">
        <img class="object-cover h-full w-full" src=@Leilao.GetImagePath()/>
    </div>
</div>

@code {
    [Parameter]
    public LeilaoUi Leilao { get; set; }
    [Parameter]
    public int IdLicitador { get; set; }

    // licitações

    private float ownLicitacao;
    private float lastLicitacao;
    private DateTime ownLicitacaoDate;
    private DateTime lastLicitacaoDate;

    private HubConnection? infoHubConnection;

    protected override async Task OnInitializedAsync()
    {
        TimeSpan ts = Leilao.GetFim() - DateTime.Now;
        counter = (int) ts.TotalSeconds;
        StartTimer();
        
        GetOwnLicitacao();
        GetLastLicitacao();
        
        infoHubConnection = new HubConnectionBuilder()
            .WithUrl("http://localhost:5269/infohub")
            .Build();

        infoHubConnection.On("UpdateAuctionInfo", (int idLeilao) =>
        {
            if (Leilao.GetId() == idLeilao)
            {
                GetOwnLicitacao(); // atualizar própria licitação
                GetLastLicitacao(); // atualizar última licitação
                InvokeAsync(StateHasChanged);
            }
        });
        
        await infoHubConnection.StartAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (infoHubConnection is not null)
        {
            await infoHubConnection.DisposeAsync();
        }
    }

    private void GetOwnLicitacao()
    {
        Licitacao l = UiService.GetUltimaLicitacaoUtilizador(IdLicitador, Leilao.GetId());
        ownLicitacao = l.GetValor();
        ownLicitacaoDate = l.GetDataHora();
    }
    
    private void GetLastLicitacao()
    {
        Licitacao l = UiService.GetUltimaLicitacaoLeilao(Leilao.GetId());
        lastLicitacao = l.GetValor();
        lastLicitacaoDate = l.GetDataHora();
    }
    
    // Timer
    
    private static System.Timers.Timer timer;
    private int counter;

    public void StartTimer()
    {
        timer = new System.Timers.Timer(60000);
        timer.Elapsed += CountDownTimer;
        timer.Enabled = true;
    }

    public void CountDownTimer(Object source, System.Timers.ElapsedEventArgs e)
    {
        if (counter > 0)
        {
            counter -= 60;
        }
        else
        {
            timer.Enabled = false;
            timer.Dispose();
            UiService.TerminarLeilao(Leilao.GetId());
        }
        InvokeAsync(StateHasChanged);
    }

    static string ConvertSecondsToTimeString(int totalSeconds)
    {
        int days = totalSeconds / (24 * 3600);
        int remainingSeconds = totalSeconds % (24 * 3600);
        int hours = remainingSeconds / 3600;
        remainingSeconds %= 3600;
        int minutes = remainingSeconds / 60;
        int seconds = remainingSeconds % 60;

        string result = "";

        if (days > 0)
        {
            result += $"{days:D2}:";
        }

        if (hours > 0)
        {
            result += $"{hours:D2}:";
        }

        if (minutes > 0)
        {
            result += $"{minutes:D2}";
        }

        return result.Trim();
    }
}