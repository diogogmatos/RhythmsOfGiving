@using RhythmsOfGiving.Controller.UI
@using System.Security.Claims
@using Microsoft.AspNetCore.SignalR.Client
@inject UiService UiService

<AuthorizeView>
    <Authorized>
        <div class="absolute right-4 top-20 w-72 h-fit max-h-96 border p-4 rounded-xl shadow-md transition-all bg-white overflow-y-scroll overflow-x-auto">
            <h1 class="font-[600] text-2xl pb-2 border-b select-none">Notificações</h1>
            <div class="space-y-2 pt-2">
                @if (notificacoes.Count == 0)
                {
                    <p class="text-gray-400 text-center w-full">
                        Quieto por agora...
                    </p>
                }
                else
                {
                    @foreach (NotificacaoUi not in notificacoes)
                    {
                        <div class="border-b pb-2">
                            <p class="font-medium">@not.GetTitle()</p>
                            <p>@not.GetMessage()</p>
                            @if (not.GetTipo() == 0)
                            {
                                <button onclick="location.href='/leiloes/@not.GetIdLeilao()';" class="my-2 bg-rhythms/20 hover:bg-rhythms text-sm text-rhythms hover:text-white py-1 px-2 rounded-2xl transition-all font-medium">
                                    Aumentar Licitação ->
                                </button>
                            }
                            else if (not.GetTipo() == 1)
                            {
                                <button onclick="location.href='/leiloes/redimir/@not.GetIdLeilao()';" class="my-2 bg-rhythms/20 hover:bg-rhythms text-sm text-rhythms hover:text-white py-1 px-2 rounded-2xl transition-all font-medium">
                                    Redimir Experiência ->
                                </button>
                            }
                            <p class="text-gray-400 text-sm select-none">@not.GetDate().ToString("dd/MM/yy HH:mm")</p>
                        </div>
                    }
                }
            </div>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationState { get; set; }
    
    private List<NotificacaoUi> notificacoes;
    
    private HubConnection? infoHubConnection;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationState;
        int idLicitador = int.Parse(authState.User.FindFirstValue(ClaimTypes.NameIdentifier));
        notificacoes = UiService.GetNotificacoesUtilizador(idLicitador);
        notificacoes.Reverse();
        StateHasChanged();
        
        infoHubConnection = new HubConnectionBuilder()
            .WithUrl("http://localhost:5269/infohub")
            .Build();

        infoHubConnection.On("UpdateNotificationInfo", (List<int> idsLicitador) =>
        {
            if (idsLicitador.Contains(idLicitador))
            {
                notificacoes = UiService.GetNotificacoesUtilizador(idLicitador);
                notificacoes.Reverse();
                InvokeAsync(StateHasChanged);
            }
        });
    }
}
